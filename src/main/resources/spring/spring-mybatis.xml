<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.zhaock" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  
    
    	<!-- master dataSource -->
	<bean id="master_data_source" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="description" value="#{meta['dataSource.description']}"></property>
		<property name="driverClass" value="#{meta['dataSource.master.driverClassName']}"></property>
		<property name="jdbcUrl" value="#{meta['dataSource.master.url']}"></property>
		<property name="user" value="#{meta['dataSource.master.username']}"></property>
		<property name="password">
			<value><![CDATA[#{meta['dataSource.master.password']}]]></value>
		</property>
		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="#{meta['dataSource.master.maxPoolSize']}" />
		<!-- 连接池中保留的最小连接数，默认为：3 -->
		<property name="minPoolSize" value="#{meta['dataSource.master.minPoolSize']}" />
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 -->
		<property name="initialPoolSize" value="#{meta['dataSource.master.initialPoolSize']}" />
		<!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="#{meta['dataSource.master.maxIdleTime']}" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
		<property name="checkoutTimeout" value="#{meta['dataSource.master.checkoutTimeout']}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="#{meta['dataSource.master.acquireIncrement']}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次 -->
		<property name="acquireRetryAttempts" value="#{meta['dataSource.master.acquireRetryAttempts']}" />
		<!--重新尝试的时间间隔，默认为：1000毫秒 -->
		<property name="acquireRetryDelay" value="#{meta['dataSource.master.acquireRetryDelay']}" />
		<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
		<property name="autoCommitOnClose" value="#{meta['dataSource.master.autoCommitOnClose']}" />
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->
		<property name="automaticTestTable" value="#{meta['dataSource.master.automaticTestTable']}" />
		<!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false -->
		<property name="breakAfterAcquireFailure" value="#{meta['dataSource.master.breakAfterAcquireFailure']}" />
		<!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="#{meta['dataSource.master.idleConnectionTestPeriod']}" />
		<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0 -->
		<property name="maxStatements" value="#{meta['dataSource.master.maxStatements']}" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
		<property name="maxStatementsPerConnection" value="#{meta['dataSource.master.maxStatementsPerConnection']}"/>
	</bean>
	
	<!-- slave dataSource -->
	<bean id="slave_sale_order_data_source" class="com.mchange.v2.c3p0.MtComboPooledDataSource"
		destroy-method="close">
		<property name="description" value="#{meta['dataSource.description']}"></property>
		<property name="driverClass" value="#{meta['dataSource.slave.driverClassName']}"></property>
		<property name="jdbcUrl" value="#{meta['dataSource.slave.url']}"></property>
		<property name="user" value="#{meta['dataSource.slave.username']}"></property>
		<property name="password">
			<value><![CDATA[#{meta['dataSource.slave.password']}]]></value>
		</property>
		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="#{meta['dataSource.slave.maxPoolSize']}" />
		<!-- 连接池中保留的最小连接数，默认为：3 -->
		<property name="minPoolSize" value="#{meta['dataSource.slave.minPoolSize']}" />
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 -->
		<property name="initialPoolSize" value="#{meta['dataSource.slave.initialPoolSize']}" />
		<!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="#{meta['dataSource.slave.maxIdleTime']}" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
		<property name="checkoutTimeout" value="#{meta['dataSource.slave.checkoutTimeout']}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="#{meta['dataSource.slave.acquireIncrement']}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次 -->
		<property name="acquireRetryAttempts" value="#{meta['dataSource.slave.acquireRetryAttempts']}" />
		<!--重新尝试的时间间隔，默认为：1000毫秒 -->
		<property name="acquireRetryDelay" value="#{meta['dataSource.slave.acquireRetryDelay']}" />
		<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
		<property name="autoCommitOnClose" value="#{meta['dataSource.slave.autoCommitOnClose']}" />
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->
		<property name="automaticTestTable" value="#{meta['dataSource.slave.automaticTestTable']}" />
		<!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false -->
		<property name="breakAfterAcquireFailure" value="#{meta['dataSource.slave.breakAfterAcquireFailure']}" />
		<!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="#{meta['dataSource.slave.idleConnectionTestPeriod']}" />
		<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0 -->
		<property name="maxStatements" value="#{meta['dataSource.slave.maxStatements']}" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
		<property name="maxStatementsPerConnection" value="#{meta['dataSource.slave.maxStatementsPerConnection']}"/>
	</bean>
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/cn/hnust/mapping/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.cn.hnust.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  
</beans>  